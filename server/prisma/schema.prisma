datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  age                   Int?
  email                 String                  @unique
  password              String?
  linkedin_url          String?
  userName              String                  @unique
  totalRank             Int                     @default(1000)
  solvedProblemDetails  String[]
  gender                String?
  collegeName           String?
  state                 String?
  country               String?
  isAdmin               Boolean
  ThirdPartyLoginAccess Boolean                 @default(false)
  profilePictureUrl     String
  praticeCourseDetail   praticeCourseDetailType
  activeDays            Int[]
}

type praticeCourseDetailType {
  c    CourseDetail
  cpp  CourseDetail
  java CourseDetail
  go   CourseDetail
}

type CourseDetail {
  participated         Boolean  @default(false)
  review               Int      @default(0)
  solvedProblemDetails String[]
}

model Contest {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  contestNo        Int      @unique
  contestName      String
  duration         Int
  startTime        DateTime
  problems         Int[]
  status           String
  noOfParticipated Int
}

type ContestInfo {
  contestId String
}

type ProblemSetInfo {
  problemId String
}

model testing {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  title     String
  createdAt DateTime @default(now())
}

type Role {
  User  Boolean
  Admin Boolean
}

enum Language {
  c
  java
  cpp
  go
}

// type Test_Type{
//   input String
//   output String
// }

// model Problem_Set{
//   id       String    @id @default(auto()) @map("_id") @db.ObjectId
//   problem_no Int 
//   like Int
//   dislike Int

// }
type InputOutputType {
  input  String
  output String
}

enum categoryEnum {
  ALGORITHMS
  AI
  CONCURRENCY
}

enum StatusEnum {
  UNSOLVED
  SOLVED
}

enum TopicEnum {
  ARRAY
  STRING
  BINARYSEARCH
  DYNAMICPROGRAMMING
  GRAPH
}

type CodeTemplateType {
  c    String
  cpp  String
  java String
  go   String
}

type ProblemDetails {
  like    String[]
  dislike String[]
}

model ProblemSet {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  problemNo         Int               @unique
  problemName       String
  description       String
  companies         String[]
  Details           ProblemDetails
  sampleInputOutput InputOutputType[]
  testcases         InputOutputType[]
  constraint        String[]
  topic             TopicEnum[]
  accepted          Int
  submission        Int
  category          categoryEnum
  aboveCodeTemplate CodeTemplateType
  belowCodeTemplate CodeTemplateType
  middleCode        CodeTemplateType
  correctMiddleCode CodeTemplateType
  createdAt         DateTime          @default(now())
}

model PraticeProblem {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  problemName       String
  description       String
  constraint        String[]
  language          Language
  sampleInputOutput InputOutputType[]
  testcases         InputOutputType[]
  aboveCodeTemplate CodeTemplateType
  belowCodeTemplate CodeTemplateType
  middleCode        CodeTemplateType
}

model EmailOtpService {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  age         Int
  collegeName String
  email       String
  password    String
  userName    String
  code        Int
  createdAt   DateTime @default(now())
}

model NormalOtpService {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  code      Int
  createdAt DateTime @default(now())
}

model DailyNewProblem {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  problemNo         Int
  problemName       String
  description       String
  companies         String[]
  constraint        String[]
  topic             TopicEnum[]
  category          categoryEnum
  sampleInputOutput InputOutputType[]
  testcases         InputOutputType[]
  aboveCodeTemplate CodeTemplateType
  belowCodeTemplate CodeTemplateType
  middleCode        CodeTemplateType
  correctMiddleCode CodeTemplateType
  createdAt         DateTime          @default(now())
}
