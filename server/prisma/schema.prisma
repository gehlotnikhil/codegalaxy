datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}



model User {
  id                      String           @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?
  age                     Int?
  email                   String           @unique
  password                String?
  userName                String          @unique
  totalRank               Int              @default(1000)
  solvedProblemDetails    String[] 
  gender                  String?
  collegeName             String?
  state                   String?
  country                 String?
  isAdmin                 Boolean
  googleLoginAccess       Boolean
  profilePictureUrl       String
}

model ProblemSet {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  problemNo         Int               @unique
  problemName       String
  description       String
  companies         String[]
  like              Int               @default(0)
  dislike           Int               @default(0)
  sampleInputOutput InputOutputType[]
  testcases         InputOutputType[]
  constraint        String[]
  topic             TopicEnum[]
  accepted          Int               @default(0)
  submission        Int               @default(0)
  category          categoryEnum
  aboveCodeTemplate CodeTemplateType
  belowCodeTemplate CodeTemplateType
  middleCode        CodeTemplateType
}

model Contest {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  contestNo        Int      @unique
  contestName      String
  duration         Int
  startTime        DateTime
  problems         Int[]
  status           String
  noOfParticipated Int
}

type ContestInfo {
  contestId String
}

type ProblemSetInfo {
  problemId String
}

model testing {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  title     String
  createdAt DateTime @default(now())
}

type Role {
  User  Boolean
  Admin Boolean
}

type InputOutputType {
  input  String
  output String
}
enum categoryEnum {
  ALGORITHMS
  AI
  CONCURRENCY
}

enum StatusEnum {
  UNSOLVED
  SOLVED
}

enum TopicEnum {
  ARRAY
  STRING
  BINARYSEARCH
  DYNAMICPROGRAMMING
  GRAPH
}
type CodeTemplateType{
  c String
  cpp String
  java String
  go String
}


